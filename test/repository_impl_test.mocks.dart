// Mocks generated by Mockito 5.4.6 from annotations
// in finance_app/test/repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:finance_app/data/data_source/local/account_dao.dart' as _i4;
import 'package:finance_app/data/data_source/local/category_dao.dart' as _i6;
import 'package:finance_app/data/data_source/local/database_helper.dart' as _i2;
import 'package:finance_app/data/data_source/local/transaction_dao.dart' as _i8;
import 'package:finance_app/domain/models/account.dart' as _i3;
import 'package:finance_app/domain/models/category.dart' as _i7;
import 'package:finance_app/domain/models/transaction.dart' as _i9;
import 'package:finance_app/domain/models/type_spending.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseHelper_0 extends _i1.SmartFake
    implements _i2.DatabaseHelper {
  _FakeDatabaseHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_1 extends _i1.SmartFake implements _i3.Account {
  _FakeAccount_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountDao extends _i1.Mock implements _i4.AccountDao {
  MockAccountDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper => (super.noSuchMethod(
        Invocation.getter(#dbHelper),
        returnValue: _FakeDatabaseHelper_0(
          this,
          Invocation.getter(#dbHelper),
        ),
      ) as _i2.DatabaseHelper);

  @override
  _i5.Future<void> insertAccounts(List<_i3.Account>? categories) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAccounts,
          [categories],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> insertAccount(_i3.Account? account) => (super.noSuchMethod(
        Invocation.method(
          #insertAccount,
          [account],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.Account>> getAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getAccounts,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Account>>.value(<_i3.Account>[]),
      ) as _i5.Future<List<_i3.Account>>);

  @override
  _i5.Future<int> deleteAccount(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateAccount(_i3.Account? account) => (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [account],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> transferMoney(
    String? fromAccountId,
    String? toAccountId,
    double? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #transferMoney,
          [
            fromAccountId,
            toAccountId,
            amount,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.Account> getAccountById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAccountById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #getAccountById,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Account>);
}

/// A class which mocks [CategoryDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryDao extends _i1.Mock implements _i6.CategoryDao {
  MockCategoryDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper => (super.noSuchMethod(
        Invocation.getter(#dbHelper),
        returnValue: _FakeDatabaseHelper_0(
          this,
          Invocation.getter(#dbHelper),
        ),
      ) as _i2.DatabaseHelper);

  @override
  _i5.Future<void> insertCategories(List<_i7.Category>? categories) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCategories,
          [categories],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> insertCategory(_i7.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #insertCategory,
          [category],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i7.Category>> loadCategories(int? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCategories,
          [type],
        ),
        returnValue: _i5.Future<List<_i7.Category>>.value(<_i7.Category>[]),
      ) as _i5.Future<List<_i7.Category>>);

  @override
  _i5.Future<int> deleteCategory(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateCategory(_i7.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [category],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i7.Category?> loadCategoryById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #loadCategoryById,
          [id],
        ),
        returnValue: _i5.Future<_i7.Category?>.value(),
      ) as _i5.Future<_i7.Category?>);
}

/// A class which mocks [TransactionDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDao extends _i1.Mock implements _i8.TransactionDao {
  MockTransactionDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper => (super.noSuchMethod(
        Invocation.getter(#dbHelper),
        returnValue: _FakeDatabaseHelper_0(
          this,
          Invocation.getter(#dbHelper),
        ),
      ) as _i2.DatabaseHelper);

  @override
  _i5.Future<int> insertTransaction(_i9.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i9.Transaction>> getTransactions(DateTime? selectedDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [selectedDate],
        ),
        returnValue:
            _i5.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i5.Future<List<_i9.Transaction>>);

  @override
  _i5.Future<List<_i9.Transaction>> getTransactionsBySpending(
    DateTime? selectedDate,
    _i10.TypeSpending? typeSpending,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsBySpending,
          [
            selectedDate,
            typeSpending,
          ],
        ),
        returnValue:
            _i5.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i5.Future<List<_i9.Transaction>>);

  @override
  _i5.Future<List<_i9.Transaction>> getTransactionsByCategory(
    DateTime? selectedDate,
    _i7.Category? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByCategory,
          [
            selectedDate,
            category,
          ],
        ),
        returnValue:
            _i5.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i5.Future<List<_i9.Transaction>>);

  @override
  _i5.Future<int> deleteTransaction(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateTransaction(_i9.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}
